apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.sentinel.name }}"
  annotations:
    "helm.sh/hook-weight": "5"
spec:
  serviceName: "{{ .Values.sentinel.name }}"
  replicas: 3
  selector:
    matchLabels:
      app: "{{ .Values.sentinel.name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.sentinel.name }}"
    spec:
      initContainers:
      - name: config
        image: {{ .Values.sentinel.image }}:{{ .Values.sentinel.tag }}
        command: [ "sh", "-c" ]
        args:
          - |
            sleep 40
            REDIS_PASSWORD={{ .Values.password }}
            nodes={{ .Values.redis.name }}-0.{{ .Values.redis.name }}.{{ .Release.Namespace }}.svc.cluster.local,{{ .Values.redis.name }}-1.{{ .Values.redis.name }}.{{ .Release.Namespace }}.svc.cluster.local,{{ .Values.redis.name }}-2.{{ .Values.redis.name }}.{{ .Release.Namespace }}.svc.cluster.local

            for i in ${nodes//,/ }
            do
                echo "finding master at $i"
                MASTER=$(redis-cli --no-auth-warning --raw -h $i -a $REDIS_PASSWORD info replication | awk '{print $1}' | grep master_host: | cut -d ":" -f2)
                if [ "$MASTER" == "" ]; then
                    echo "no master found"
                    MASTER=
                else
                    echo "found $MASTER"
                    break
                fi
            done
            echo "sentinel monitor mymaster $MASTER {{ .Values.redis.port }} 2" >> /tmp/master

            echo "port {{ .Values.sentinel.port }}
            $(cat /tmp/master)
            sentinel down-after-milliseconds mymaster {{ .Values.sentinel.port }}
            sentinel failover-timeout mymaster 60000
            sentinel parallel-syncs mymaster 1
            sentinel auth-pass mymaster $REDIS_PASSWORD
            " > /etc/redis/sentinel.conf
            cat /etc/redis/sentinel.conf
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
      containers:
      - name: "{{ .Values.sentinel.name }}"
        image: {{ .Values.sentinel.image }}:{{ .Values.sentinel.tag }}
        command: ["redis-sentinel"]
        args: ["/etc/redis/sentinel.conf"]
        ports:
        - containerPort: {{ .Values.sentinel.port }}
          name: "{{ .Values.sentinel.name }}"
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: data
          mountPath: /data
      volumes:
      - name: {{ .Values.redis.name }}-config
        emptyDir: {}
      - name: data
        emptyDir: {}